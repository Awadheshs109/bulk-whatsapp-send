<!-- Full index.ejs (Complete and updated version with media previews and toasts; added note that media is sent from assets to all contacts independently of Excel) -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>WhatsApp Bulk Sender</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    #dropzone {
      border: 2px dashed #bbb;
      border-radius: 8px;
      padding: 18px;
      text-align: center;
      color: #666;
      margin-bottom: 15px;
      cursor: pointer;
      background: #f8f8f8;
    }

    #dropzone.dragover {
      background: #eaf7ea;
    }

    .toast-container {
      position: fixed;
      top: 1rem;
      right: 1rem;
      z-index: 9999;
    }

    #mediaList .card {
      margin: 5px;
    }

    #mediaList img,
    #mediaList video {
      max-width: 100%;
      height: auto;
    }
  </style>
</head>

<body class="container py-5">


  <h2 class="mb-3">WhatsApp Bulk Message Sender</h2>


  <!-- Send Message Form -->
  <form id="sendForm" class="mb-4">
    <div class="mb-3">
      <label class="form-label">Message Template (use <code>{name}</code>):</label>
      <textarea class="form-control" name="messageTemplate" id="messageTemplate" rows="5" required>
Hi {name},

Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.

Thanks,
Awadhesh Sharma
      </textarea>
    </div>
    <button class="btn btn-success" type="submit">Send Message</button>
  </form>


  <!-- Multi-Image/Video Drag & Drop Upload -->
  <div id="dropzone" class="mb-4">
    Drag & drop <b>.jpg</b> or <b>.mp4</b> files here (max 20MB/each), or click to select files
    <input type="file" id="mediaFiles" name="mediaFiles" accept=".jpg,.mp4" multiple style="display:none;">
    <p class="small text-muted">Note: Media is sent from assets folder to all contacts independently of Excel.</p>
  </div>


  <div id="mediaList" class="d-flex flex-wrap mb-4"></div>


  <h4>Contacts List <small class="text-muted">(auto-refreshes every 30 sec)</small></h4>
  <table class="table table-striped" id="contactsTable">
    <thead>
      <tr>
        <th>Name</th>
        <th>Number</th>
      </tr>
    </thead>
    <tbody>
      <% for (let c of contacts) { %>
        <tr>
          <td>
            <%= c.Name || '' %>
          </td>
          <td>
            <%= c.Number || '' %>
          </td>
        </tr>
        <% } %>
    </tbody>
  </table>


  <!-- Toast notifications -->
  <div class="toast-container" id="toastContainer"></div>


  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // --- Contacts table auto-refresh ---
    function refreshContactsTable() {
      fetch('/api/contacts').then(r => r.json()).then(list => {
        let html = '';
        for (let c of list) {
          html += `<tr>
            <td>${c.Name || ''}</td>
            <td>${c.Number || ''}</td>
          </tr>`;
        }
        document.querySelector('#contactsTable tbody').innerHTML = html;
      });
    }
    setInterval(refreshContactsTable, 30000);


    // --- Send Message ---
    document.getElementById('sendForm').onsubmit = async function (e) {
      e.preventDefault();
      const messageTemplate = document.getElementById('messageTemplate').value;
      const btn = this.querySelector('button[type=submit]');
      btn.disabled = true;
      fetch('/api/send-messages', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ messageTemplate })
      })
        .then(r => r.json())
        .then(data => {
          if (data.ok) {
            (data.successNumbers || []).forEach(num => {
              showToast(`Message sent (${num}) successfully!`, 'success');
            });
            (data.failedNumbers || []).forEach(num => {
              showToast(`Failed to send message to (${num})`, 'danger');
            });
          } else {
            showToast("Sending failed: " + (data.message || ""), 'danger');
          }
          btn.disabled = false;
        })
        .catch(err => {
          btn.disabled = false;
          showToast("Sending failed: " + err.message, 'danger');
        });
    };


    // --- Bootstrap Toast Helper ---
    function showToast(msg, type = 'info') {
      const toastContainer = document.getElementById('toastContainer');
      const id = 'toast' + String(Math.random()).slice(2);
      let html = `<div class="toast align-items-center text-bg-${type} border-0 mb-2" id="${id}" role="alert" aria-live="polite" data-bs-delay="2000">
        <div class="d-flex"><div class="toast-body">${msg}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button></div>
      </div>`;
      toastContainer.insertAdjacentHTML('beforeend', html);
      let toastEl = document.getElementById(id);
      let toastObj = new bootstrap.Toast(toastEl);
      toastObj.show();
      toastEl.addEventListener('hidden.bs.toast', () => toastEl.remove());
    }


    // --- Media drag-drop + multi-upload (supports .jpg and .mp4) ---
    const dz = document.getElementById('dropzone');
    const fileInput = document.getElementById('mediaFiles');
    dz.addEventListener('click', () => fileInput.click());
    dz.addEventListener('dragover', e => { e.preventDefault(); dz.classList.add('dragover'); });
    dz.addEventListener('dragleave', e => dz.classList.remove('dragover'));
    dz.addEventListener('drop', function (e) {
      e.preventDefault(); dz.classList.remove('dragover');
      fileInput.files = e.dataTransfer.files;
      uploadFiles(fileInput.files);
    });
    fileInput.addEventListener('change', () => uploadFiles(fileInput.files));
    function uploadFiles(files) {
      if (!files || files.length == 0) return;
      let validFiles = [...files].filter(f => (f.type == 'image/jpeg' || f.type == 'video/mp4') && f.size < 20e6);
      if (validFiles.length != files.length) {
        showToast('Only JPG/MP4 files under 20MB are allowed', 'danger'); return;
      }
      let data = new FormData();
      validFiles.forEach(f => data.append('mediaFiles', f));
      fetch('/api/upload-media', { method: 'POST', body: data })
        .then(r => r.json())
        .then(obj => {
          if (obj.ok) {
            showToast(`${obj.files.length} file(s) uploaded!`, 'success');
            refreshMediaList();  // Refresh uploaded media display
          } else showToast('Upload failed: ' + (obj.message || ''), 'danger');
        })
        .catch(() => showToast("Upload error!", 'danger'));
    }


    // --- Display Uploaded Media with Previews (AJAX refresh) ---
    function refreshMediaList() {
      fetch('/api/media').then(r => r.json()).then(files => {
        let html = '';
        files.forEach(f => {
          const isVideo = f.endsWith('.mp4');
          html += `<div class="card" style="width: 150px;">
            <div class="card-body p-1 text-center">
              ${isVideo ? `<video src="${f}" controls width="100"></video>` : `<img src="${f}" alt="${f}" width="100">`}
              <p class="card-text small">${f}</p>
            </div>
          </div>`;
        });
        document.getElementById('mediaList').innerHTML = html;
      });
    }
    // Initial load and refresh every 30s
    refreshMediaList();
    setInterval(refreshMediaList, 30000);
  </script>
</body>

</html>