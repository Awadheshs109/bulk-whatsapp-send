<!-- Full updated index.ejs (Complete and updated version with two send buttons for text-only and media-only, media previews, delete icons at top-right corner of each media card for deleting from assets folder, and toasts; with hiding of Uploaded Media section and Send Media Only button if no media, and Send Media Only button displayed after media list) -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>WhatsApp Bulk Sender</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    #dropzone {
      border: 2px dashed #bbb;
      border-radius: 8px;
      padding: 18px;
      text-align: center;
      color: #666;
      margin-bottom: 15px;
      cursor: pointer;
      background: #f8f8f8;
    }

    #dropzone.dragover {
      background: #eaf7ea;
    }

    .toast-container {
      position: fixed;
      top: 1rem;
      right: 1rem;
      z-index: 9999;
    }

    #mediaList .card {
      margin: 5px;
      position: relative;
      width: 150px;
    }

    #mediaList img,
    #mediaList video {
      max-width: 100%;
      height: auto;
    }

    .delete-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      background-color: rgba(255, 0, 0, 0.8);
      color: white;
      border: none;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      line-height: 24px;
      text-align: center;
      cursor: pointer;
      font-size: 16px;
      opacity: 0.8;
      z-index: 10;
      transition: opacity 0.2s;
    }

    .delete-btn:hover {
      opacity: 1;
    }
  </style>
</head>

<body class="container py-5">

  <h2 class="mb-3">WhatsApp Bulk Message Sender</h2>

  <!-- Send Message Form with text-only button -->
  <form id="sendForm" class="mb-4">
    <div class="mb-3">
      <label class="form-label">Message Template (use <code>{name}</code>):</label>
      <textarea class="form-control" name="messageTemplate" id="messageTemplate" rows="7" required>
Hi {name},


Thanks,
Awadhesh Sharma
      </textarea>
    </div>
    <button class="btn btn-primary" type="submit" data-mode="text">Send Text Only</button>
  </form>

  <!-- Multi-Image/Video Drag & Drop Upload -->
  <div id="dropzone" class="mb-4">
    Drag & drop <b>.jpg</b> or <b>.mp4</b> files here (max 20MB/each), or click to select files
    <input type="file" id="mediaFiles" name="mediaFiles" accept=".jpg,.mp4" multiple style="display:none;">
    <p class="small text-muted">Note: Media is sent from assets folder to all contacts independently of Excel.</p>
  </div>

  <!-- Uploaded Media Display with Previews and Delete Icons -->
  <h4 id="uploadedMediaTitle">Uploaded Media</h4>
  <div id="mediaList" class="d-flex flex-wrap mb-4"></div>
  <button class="btn btn-success mb-4" id="sendMediaBtn" style="display: none;">Send Media Only</button>

  <h4>Contacts List <small class="text-muted">(auto-refreshes every 30 sec)</small></h4>
  <table class="table table-striped" id="contactsTable">
    <thead>
      <tr>
        <th>Name</th>
        <th>Number</th>
      </tr>
    </thead>
    <tbody>
      <% for (let c of contacts) { %>
        <tr>
          <td>
            <%= c.Name || '' %>
          </td>
          <td>
            <%= c.Number || '' %>
          </td>
        </tr>
      <% } %>
    </tbody>
  </table>

  <!-- Toast notifications -->
  <div class="toast-container" id="toastContainer"></div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // --- Contacts table auto-refresh ---
    function refreshContactsTable() {
      fetch('/api/contacts').then(r => r.json()).then(list => {
        let html = '';
        for (let c of list) {
          html += `<tr>
            <td>${c.Name || ''}</td>
            <td>${c.Number || ''}</td>
          </tr>`;
        }
        document.querySelector('#contactsTable tbody').innerHTML = html;
      });
    }
    setInterval(refreshContactsTable, 30000);

    // --- Send Text Message ---
    document.getElementById('sendForm').onsubmit = async function (e) {
      e.preventDefault();
      const messageTemplate = document.getElementById('messageTemplate').value;
      const btn = e.submitter; // the button that was clicked
      const mode = btn.dataset.mode; // 'text'
      btn.disabled = true;
      fetch('/api/send-messages', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ messageTemplate, mode })
      })
        .then(r => r.json())
        .then(data => {
          if (data.ok) {
            (data.successNumbers || []).forEach(num => {
              showToast(`Message sent (${num}) successfully!`, 'success');
            });
            (data.failedNumbers || []).forEach(num => {
              showToast(`Failed to send message to (${num})`, 'danger');
            });
          } else {
            showToast("Sending failed: " + (data.message || ""), 'danger');
          }
          btn.disabled = false;
        })
        .catch(err => {
          btn.disabled = false;
          showToast("Sending failed: " + err.message, 'danger');
        });
    };

    // --- Send Media Only (separate button handler) ---
    document.getElementById('sendMediaBtn').addEventListener('click', async function () {
      this.disabled = true;
      fetch('/api/send-messages', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ messageTemplate: '', mode: 'media' })
      })
        .then(r => r.json())
        .then(data => {
          if (data.ok) {
            (data.successNumbers || []).forEach(num => {
              showToast(`Media sent (${num}) successfully!`, 'success');
            });
            (data.failedNumbers || []).forEach(num => {
              showToast(`Failed to send media to (${num})`, 'danger');
            });
          } else {
            showToast("Sending failed: " + (data.message || ""), 'danger');
          }
          this.disabled = false;
        })
        .catch(err => {
          this.disabled = false;
          showToast("Sending failed: " + err.message, 'danger');
        });
    });

    // --- Bootstrap Toast Helper ---
    function showToast(msg, type = 'info') {
      const toastContainer = document.getElementById('toastContainer');
      const id = 'toast' + String(Math.random()).slice(2);
      let html = `<div class="toast align-items-center text-bg-${type} border-0 mb-2" id="${id}" role="alert" aria-live="polite" data-bs-delay="2000">
        <div class="d-flex"><div class="toast-body">${msg}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button></div>
      </div>`;
      toastContainer.insertAdjacentHTML('beforeend', html);
      let toastEl = document.getElementById(id);
      let toastObj = new bootstrap.Toast(toastEl);
      toastObj.show();
      toastEl.addEventListener('hidden.bs.toast', () => toastEl.remove());
    }

    // --- Media drag-drop + multi-upload (supports .jpg and .mp4) ---
    const dz = document.getElementById('dropzone');
    const fileInput = document.getElementById('mediaFiles');
    dz.addEventListener('click', () => fileInput.click());
    dz.addEventListener('dragover', e => { e.preventDefault(); dz.classList.add('dragover'); });
    dz.addEventListener('dragleave', e => dz.classList.remove('dragover'));
    dz.addEventListener('drop', function (e) {
      e.preventDefault(); dz.classList.remove('dragover');
      fileInput.files = e.dataTransfer.files;
      uploadFiles(fileInput.files);
    });
    fileInput.addEventListener('change', () => uploadFiles(fileInput.files));
    function uploadFiles(files) {
      if (!files || files.length == 0) return;
      let validFiles = [...files].filter(f => (f.type == 'image/jpeg' || f.type == 'video/mp4') && f.size < 20e6);
      if (validFiles.length != files.length) {
        showToast('Only JPG/MP4 files under 20MB are allowed', 'danger'); return;
      }
      let data = new FormData();
      validFiles.forEach(f => data.append('mediaFiles', f));
      fetch('/api/upload-media', { method: 'POST', body: data })
        .then(r => r.json())
        .then(obj => {
          if (obj.ok) {
            showToast(`${obj.files.length} file(s) uploaded!`, 'success');
            refreshMediaList();  // Refresh uploaded media display
          } else showToast('Upload failed: ' + (obj.message || ''), 'danger');
        })
        .catch(() => showToast("Upload error!", 'danger'));
    }

    // --- Display Uploaded Media with Previews (AJAX refresh), hide if no media, add delete handlers ---
    function refreshMediaList() {
      fetch('/api/media').then(r => r.json()).then(files => {
        let html = '';
        files.forEach(f => {
          const isVideo = f.endsWith('.mp4');
          html += `<div class="card" style="width: 150px;">
            <button class="delete-btn" data-file="${f}">&times;</button>
            <div class="card-body p-1 text-center">
              ${isVideo ? `<video src="${f}" controls width="100"></video>` : `<img src="${f}" alt="${f}" width="100">`}
              <p class="card-text small">${f}</p>
            </div>
          </div>`;
        });
        document.getElementById('mediaList').innerHTML = html;

        // Hide/show elements based on media presence
        const hasMedia = files.length > 0;
        document.getElementById('uploadedMediaTitle').style.display = hasMedia ? 'block' : 'none';
        document.getElementById('mediaList').style.display = hasMedia ? 'flex' : 'none';
        document.getElementById('sendMediaBtn').style.display = hasMedia ? 'inline-block' : 'none';

        // Add delete event listeners
        document.querySelectorAll('.delete-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const file = btn.dataset.file;
            fetch(`/api/delete-media/${encodeURIComponent(file)}`, { method: 'DELETE' })
              .then(r => r.json())
              .then(data => {
                if (data.ok) {
                  showToast(`Deleted ${file.split('/').pop()}`, 'success');
                  refreshMediaList();
                } else {
                  showToast(`Delete failed: ${data.message}`, 'danger');
                }
              })
              .catch(err => showToast(`Delete error: ${err.message}`, 'danger'));
          });
        });
      });
    }
    // Initial load and refresh every 30s
    refreshMediaList();
    setInterval(refreshMediaList, 30000);
  </script>
</body>

</html>
